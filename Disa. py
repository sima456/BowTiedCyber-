#!/usr/bin/env python3
import argparse
import pefile
from capstone import *


def disassemble_pe_file(pe_file_path, verbose=False):
    # Load the target PE file
    pe = pefile.PE(pe_file_path)

    # Get the address of the program entry point from the program header
    entry_point = pe.OPTIONAL_HEADER.AddressOfEntryPoint

    # Compute memory address where the entry code will be loaded into memory
    entry_point_address = entry_point + pe.OPTIONAL_HEADER.ImageBase

    # Get the binary code from the PE file object
    binary_code = pe.get_memory_mapped_image()[entry_point:entry_point + 100]

    # Initialize disassembler to disassemble 32-bit x86 binary code
    disassembler = Cs(CS_ARCH_X86, CS_MODE_32)

    # Disassemble the code
    instructions = []
    for instruction in disassembler.disasm(binary_code, entry_point_address):
        instructions.append((instruction.mnemonic, instruction.op_str))

    if verbose:
        for mnemonic, op_str in instructions:
            explanation = ""
            if mnemonic in ["push", "pop"]:
                explanation = "Pushes or pops a value onto or off of the stack"
            elif mnemonic in ["mov", "lea"]:
                explanation = "Moves data between registers or memory locations"
            elif mnemonic == "add":
                explanation = "Adds two values and stores the result in the destination"
            elif mnemonic == "sub":
                explanation = "Subtracts the second operand from the first and stores the result in the destination"
            elif mnemonic == "jmp":
                explanation = "Unconditionally jumps to a new address"
            elif mnemonic == "je":
                explanation = "Jumps to a new address if the zero flag is set (indicating that the operands were equal)"
            elif mnemonic == "jne":
                explanation = "Jumps to a new address if the zero flag is clear (indicating that the operands were not equal)"
            elif mnemonic == "call":
                explanation = "Calls a function at the specified address"
            elif mnemonic == "ret":
                explanation = "Returns from a function call"
            elif mnemonic == "nop":
                explanation = "No operation (does nothing)"
            print(f"{mnemonic}\t{op_str}\t# {explanation}")
    else:
        for mnemonic, op_str in instructions:
            print(f"{mnemonic}\t{op_str}")


def main():
    parser = argparse.ArgumentParser(description="Disassemble a PE file")
    parser.add_argument("pe_file", help="Path to the PE file to disassemble")
    parser.add_argument("-v", "--verbose", action="store_true", help="Print detailed explanation of each instruction")
    args = parser.parse_args()

    disassemble_pe_file(args.pe_file, verbose=args.verbose)


if __name__ == "__main__":
    main()
