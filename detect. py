#!/usr/bin/env python3

import sys
import argparse
from scapy.all import *

def get_mac(ip):
    try:
        mac = ARP(pdst=ip)
        mac = srp(mac, timeout=2, verbose=False)[0][0][1].hwsrc
    except:
        print("[-] Error: Unable to get MAC address of %s" % ip)
        sys.exit(0)
    return mac

def arp_spoof_detect(packet):
    if ARP in packet and packet[ARP].op in (1,2):
        mac = get_mac(packet[ARP].psrc)
        if packet[ARP].hwsrc != mac:
            print("[+] ARP Spoofing Detected from MAC address: %s" % packet[ARP].hwsrc)

def mac_flooding_detect(packet, threshold):
    mac = packet.src
    if mac not in mac_count:
        mac_count[mac] = 1
    else:
        mac_count[mac] += 1

    if mac_count[mac] >= threshold:
        print("[+] MAC Flooding Detected from MAC address: %s" % mac)

def mac_change_attempt(packet):
    if Ether in packet:
        mac = packet[Ether].src
        if mac != packet[Ether].dst:
            print("[+] MAC Address Change Attempt Detected from MAC address: %s" % mac)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='ARP Spoofing, MAC Flooding, and MAC Address Change Detection Tool')
    parser.add_argument('-i', '--interface', metavar='<interface>', help='Interface to capture packets')
    parser.add_argument('-f', '--file', metavar='<pcap_file>', help='PCAP file to analyze')
    parser.add_argument('-t', '--threshold', metavar='<threshold>', type=int, default=50, help='MAC Flooding threshold (default=50)')
    args = parser.parse_args()

    mac_count = {}

    if args.interface:
        print("[*] Starting live capture on interface %s..." % args.interface)
        sniff(filter='arp or ether src not 00:00:00:00:00:00', prn=lambda x: (arp_spoof_detect(x), mac_flooding_detect(x, args.threshold), mac_change_attempt(x)), iface=args.interface, store=0)
    elif args.file:
        print("[*] Analyzing PCAP file %s..." % args.file)
        packets = rdpcap(args.file)
        for packet in packets:
            arp_spoof_detect(packet)
            mac_flooding_detect(packet, args.threshold)
            mac_change_attempt(packet)
    else:
        parser.print_help()
