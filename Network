#!/usr/bin/env python3

import pefile
import sys
import argparse
import os
import pprint
import networkx
import re
from networkx.drawing.nx_agraph import write_dot
import collections
from networkx.algorithms import bipartite

args = argparse.ArgumentParser("Visualize shared hostnames between a directory of malware samples")
args.add_argument("target_path", help="directory with malware samples")
args.add_argument("output_file", help="file to write DOT file to")
args.add_argument("malware_projection", help="file to write DOT file to")
args.add_argument("hostname_projection", help="file to write DOT file to")
args = args.parse_args()

network = networkx.Graph()
with open("domain_suffixes.txt") as f:
    valid_hostname_suffixes = set(map(str.strip, f))

def find_hostnames(string):
    possible_hostnames = re.findall(
        r'(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-]{,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}',
        string
    )
    valid_hostnames = filter(
        lambda hostname: hostname.split(".")[-1].lower() in valid_hostname_suffixes,
        possible_hostnames
    )
    return valid_hostnames

for root, dirs, files in os.walk(args.target_path):
    for path in files:
        try:
            pe = pefile.PE(os.path.join(root, path))
        except pefile.PEFormatError:
            continue

        fullpath = os.path.join(root, path)
        with os.popen("strings '{0}'".format(fullpath)) as f:
            strings = f.read()

        hostnames = list(find_hostnames(strings))
        if len(hostnames):
            network.add_node(
                path, label=path[:32], color='black', penwidth=5, bipartite=0
            )
        for hostname in hostnames:
            network.add_node(
                hostname, label=hostname, color='blue', penwidth=10, bipartite=1
            )
            network.add_edge(hostname, path, penwidth=2)

        if hostnames:
            print("Extracted hostnames from:", path)
            pprint.pprint(hostnames)

write_dot(network, args.output_file)

malware = set(n for n, d in network.nodes(data=True) if d['bipartite'] == 0)
hostname = set(network) - malware

malware_network = bipartite.projected_graph(network, malware)
hostname_network = bipartite.projected_graph(network, hostname)

write_dot(malware_network, args.malware_projection)
write_dot(hostname_network, args.hostname_projection)
